{
  "metadata": {
    "package": "python-skill-builder",
    "version": "1.3.0",
    "lastUpdated": "2025-10-19",
    "purpose": "Feature inventory for test suite generation and regression prevention",
    "relatedIssues": ["#19", "#20", "#21", "#24", "#26", "#31", "#33", "#34", "#36", "#38"]
  },
  "features": {
    "backend": {
      "api": {
        "endpoints": [
          {
            "path": "/api/modules",
            "method": "GET",
            "description": "List all training modules",
            "testCases": [
              "Returns 200 status",
              "Returns array of modules",
              "Each module has id, title, description",
              "Returns 7 modules total"
            ]
          },
          {
            "path": "/api/modules/<id>",
            "method": "GET",
            "description": "Get specific module with workshops",
            "testCases": [
              "Returns 200 for valid module ID",
              "Returns 404 for invalid module ID",
              "Returns module with workshops array",
              "Each workshop has required fields"
            ]
          },
          {
            "path": "/api/grade",
            "method": "POST",
            "description": "Submit and grade user code",
            "testCases": [
              "Accepts moduleId, workshopId, code",
              "Accepts optional approachId for multi-approach workshops",
              "Returns score, max_score, feedback, execution_time",
              "Returns 400 for missing required fields",
              "Returns 404 for invalid module/workshop ID",
              "Returns 400 for missing approachId when required",
              "Backward compatible with single-approach format"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/start",
            "method": "POST",
            "description": "Initialize a new TDD workflow for a workshop",
            "testCases": [
              "Creates new workflow with 6 steps",
              "Returns workflow_id, current_step, steps_status",
              "Step 1 is unlocked, steps 2-6 are locked",
              "All steps initialized with empty code and no validation results"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/{workflow_id}",
            "method": "GET",
            "description": "Get current workflow state",
            "testCases": [
              "Returns current_step, steps_status, code_per_step",
              "Returns 404 for nonexistent workflow",
              "Returns all 6 steps with metadata"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/{workflow_id}/validate-step",
            "method": "POST",
            "description": "Validate current step",
            "testCases": [
              "Accepts step number and code",
              "Returns valid, errors, warnings, can_advance, validation_result",
              "Stores code for the step",
              "Marks step complete if valid",
              "Returns 400 for invalid step"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/{workflow_id}/advance",
            "method": "POST",
            "description": "Advance to next step",
            "testCases": [
              "Advances to next step if current step complete",
              "Returns current_step and step_status",
              "Returns 400 if current step not completed",
              "Unlocks next step"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/{workflow_id}/go-back",
            "method": "POST",
            "description": "Go back to a previous step",
            "testCases": [
              "Accepts target_step in request body",
              "Returns current_step and step_status",
              "Returns 400 for invalid target step",
              "Allows editing previous steps"
            ]
          },
          {
            "path": "/api/workshops/{id}/workflow/{workflow_id}/metrics",
            "method": "GET",
            "description": "Get code metrics for current step",
            "testCases": [
              "Returns complexity, coverage, duplication, has_type_hints, has_docstring",
              "Returns 404 for nonexistent workflow",
              "Calculates metrics for current step code"
            ]
          },
          {
            "path": "/api/users/{user_id}/achievements",
            "method": "GET",
            "description": "Get all achievements for a user",
            "testCases": [
              "Returns 200 status",
              "Returns achievements array",
              "Returns total_points",
              "Each achievement has id, name, description, icon, category, points, unlocked_at"
            ]
          },
          {
            "path": "/api/users/{user_id}/badges",
            "method": "GET",
            "description": "Get all badges for a user",
            "testCases": [
              "Returns 200 status",
              "Returns badges array",
              "Returns showcase with organized badges",
              "Each badge has id, achievement_id, name, emoji, rarity, color, unlock_date"
            ]
          },
          {
            "path": "/api/users/{user_id}/stats",
            "method": "GET",
            "description": "Get user statistics",
            "testCases": [
              "Returns 200 status",
              "Returns stats with all user metrics",
              "Returns user rank",
              "Stats include skill levels, completion counts, time tracking"
            ]
          },
          {
            "path": "/api/users/{user_id}/workflows",
            "method": "GET",
            "description": "List user's workflow progress",
            "testCases": [
              "Returns 200 status",
              "Returns workflows array",
              "Each workflow has workflow_id, user_id, workshop_id, completion info"
            ]
          },
          {
            "path": "/api/leaderboard",
            "method": "GET",
            "description": "Get global leaderboard",
            "testCases": [
              "Returns 200 status",
              "Accepts limit query param (default 10)",
              "Accepts offset query param (default 0)",
              "Returns leaderboard array sorted by points"
            ]
          },
          {
            "path": "/api/workflows/{workflow_id}/complete",
            "method": "POST",
            "description": "Mark workflow as complete and check achievements",
            "testCases": [
              "Accepts user_id in request body",
              "Returns 200 on success",
              "Returns achievements_unlocked array",
              "Returns updated stats",
              "Returns 400 if user_id missing",
              "Returns 404 if workflow not found"
            ]
          }
        ]
      },
      "sandbox": {
        "description": "AST-based code execution sandbox",
        "features": [
          {
            "name": "AST validation",
            "testCases": [
              "Blocks import statements for non-whitelisted modules",
              "Blocks open() calls",
              "Blocks eval() and exec() in user code",
              "Blocks __import__ in user code",
              "Allows ast.Attribute (method calls)",
              "Allows ast.Try (exception handling)",
              "Allows ast.Raise (raising exceptions)",
              "Allows ast.Lambda (lambda functions)",
              "Allows lambda in functional programming patterns (map, filter)"
            ]
          },
          {
            "name": "Safe builtins",
            "testCases": [
              "Provides len, range, sum, min, max, abs",
              "Provides enumerate, zip, sorted, all, any",
              "Provides map, filter for functional programming",
              "Provides list, dict, set, tuple, str, int, float, bool",
              "Provides print, isinstance, type",
              "Provides Exception, ValueError, TypeError",
              "Provides KeyError, IndexError, AttributeError",
              "Blocks file I/O functions",
              "Blocks network functions",
              "Blocks os module access"
            ]
          },
          {
            "name": "Namespace isolation",
            "testCases": [
              "User namespace has restricted builtins",
              "User namespace includes __source__ with submitted code",
              "Test namespace has extended builtins",
              "Test namespace includes __import__, __name__, __file__",
              "Test namespace includes inspect module",
              "User code cannot access test namespace",
              "Test code can access user namespace via grade(ns)"
            ]
          }
        ]
      },
      "grading": {
        "description": "Code grading and test execution",
        "features": [
          {
            "name": "Single-approach grading",
            "testCases": [
              "Executes user code in sandbox",
              "Executes test harness with grade() function",
              "Returns normalized result with score, max_score, feedback",
              "Tracks execution time",
              "Handles syntax errors gracefully",
              "Handles runtime errors gracefully"
            ]
          },
          {
            "name": "Multi-approach grading",
            "testCases": [
              "Routes to correct approach based on approachId",
              "Uses approach-specific test harness",
              "Returns 400 if approachId missing for multi-approach workshop",
              "Returns 404 if approachId not found"
            ]
          },
          {
            "name": "Pattern detection",
            "testCases": [
              "Test harness can access __source__ from namespace",
              "Can detect list comprehension usage",
              "Can detect for-loop usage",
              "Can detect string concatenation patterns",
              "Can provide pattern-specific feedback"
            ]
          }
        ]
      },
      "workflow": {
        "description": "TDD Workflow Engine for step-by-step guided learning",
        "features": [
          {
            "name": "Workflow state management",
            "testCases": [
              "TDDWorkflowState tracks current step (1-6)",
              "Workflow tracks completion status per step",
              "Workflow tracks locked/unlocked status per step",
              "Workflow stores code/input for each step",
              "Workflow stores validation results",
              "Workflow prevents advancing without meeting requirements",
              "Workflow allows going back to previous steps",
              "Workflow serializes/deserializes for persistence"
            ]
          },
          {
            "name": "Step validation engine",
            "testCases": [
              "STEP 1 validation: test function name starts with test_",
              "STEP 1 validation: at least one assertion present",
              "STEP 1 validation: test syntax is valid Python",
              "STEP 1 validation: test actually fails when executed",
              "STEP 3 validation: code syntax is valid Python",
              "STEP 3 validation: required function exists and is callable",
              "STEP 3 validation: user's test passes with user's code",
              "STEP 5 validation: code syntax is valid Python",
              "STEP 5 validation: user's test still passes (GREEN)",
              "STEP 5 validation: code metrics improved or maintained"
            ]
          },
          {
            "name": "Code metrics calculator",
            "testCases": [
              "Calculate cyclomatic complexity",
              "Calculate code coverage estimate",
              "Calculate code duplication",
              "Detect type hints presence",
              "Detect docstring presence",
              "Generate metrics summary"
            ]
          },
          {
            "name": "Workflow persistence",
            "testCases": [
              "Save workflow state to JSON files",
              "Load workflow state from JSON files",
              "Delete workflow state files",
              "List all workflows",
              "Check workflow existence"
            ]
          }
        ]
      },
      "tddWorkflow": {
        "description": "TDD workflow schema and step-by-step guidance system",
        "features": [
          {
            "name": "TDD workflow schema",
            "testCases": [
              "TDDWorkflowDefinition with feature_description",
              "StepContent with objective, instruction, requirements",
              "StepContent with starter_code, example_code, hints",
              "StepContent with success_criteria and error_messages",
              "Support for 6 TDD steps (RED, GREEN, REFACTOR phases)",
              "Serialization to/from dictionary",
              "Backward compatibility with existing workshops"
            ]
          },
          {
            "name": "Hints analyzer service",
            "testCases": [
              "Get hints for specific step",
              "Progressive hint reveals (levels 1-4)",
              "Error-based hint suggestions",
              "Get example code for step",
              "Get solution code for step",
              "Get starter code for step",
              "Get step requirements checklist",
              "Get success criteria for step",
              "Get step objective and instruction"
            ]
          },
          {
            "name": "Error message generator",
            "testCases": [
              "Generate STEP 1 (RED) error messages",
              "Generate STEP 3 (GREEN) error messages",
              "Generate STEP 5 (REFACTOR) error messages",
              "Error message format with type, code, message, hint",
              "Support for current/expected value display",
              "Generic error message generation"
            ]
          },
          {
            "name": "TDD workflow validation",
            "testCases": [
              "Validate TDD workflow structure",
              "Validate step content structure",
              "Check required fields (feature_description, step_1)",
              "Validate optional steps",
              "Type checking for requirements, hints, error_messages"
            ]
          }
        ]
      },
      "visualizations": {
        "description": "Data-driven visualization system for enhanced learning",
        "features": [
          {
            "name": "Execution results capture",
            "testCases": [
              "Captures user-defined functions with name and type",
              "Captures user-defined classes with name, type, and methods",
              "Captures user-defined variables with name, type, and value",
              "Execution results included in /api/grade response",
              "Execution results available for all grading requests"
            ]
          },
          {
            "name": "Visualization configuration",
            "testCases": [
              "Workshops can define visualizations array in JSON",
              "Visualizations returned in /api/grade response when configured",
              "Workshops without visualizations work normally (backward compatibility)",
              "Visualization config includes id, type, enabled, and config fields"
            ]
          },
          {
            "name": "CLI dashboard renderer",
            "testCases": [
              "Renders text-based dashboards with ASCII art",
              "Supports template placeholders for dynamic content",
              "Resolves execution result paths (e.g., execution.classes.Counter.name)",
              "Handles literal values in placeholders",
              "Converts arrays to comma-separated strings",
              "Returns placeholder text for unresolved paths"
            ]
          }
        ]
      },
      "progressTracking": {
        "description": "Workflow progress persistence and tracking",
        "features": [
          {
            "name": "WorkflowProgress class",
            "testCases": [
              "Tracks workflow_id, user_id, workshop_id",
              "Tracks current_step and steps_completed",
              "Stores code_per_step for each step",
              "Stores validation_results for each step",
              "Tracks started_at, last_updated_at, completed_at timestamps",
              "Tracks time_spent_seconds",
              "Tracks hints_used per step",
              "Tracks attempts_per_step",
              "Calculates completion percentage",
              "Serializes/deserializes to/from dictionary"
            ]
          },
          {
            "name": "WorkflowStorage progress methods",
            "testCases": [
              "save_progress() persists WorkflowProgress to JSON",
              "load_progress() retrieves WorkflowProgress from JSON",
              "delete_progress() removes progress file",
              "list_user_workflows() returns all workflows for user",
              "get_progress_stats() calculates aggregated statistics",
              "Progress organized by user_id/workflow_id.json structure"
            ]
          }
        ]
      },
      "achievements": {
        "description": "TDD-specific achievement system with gamification",
        "features": [
          {
            "name": "Achievement class",
            "testCases": [
              "Achievement has id, name, description, icon, category, points",
              "Categories: red, green, refactor, mastery, streak",
              "Serializes to dictionary"
            ]
          },
          {
            "name": "AchievementTracker service",
            "testCases": [
              "Defines 25+ achievements across all categories",
              "RED phase: Red Analyst, Test Writer, Test Master, Edge Case Hunter, Assertion Expert",
              "GREEN phase: Green Engineer, Code Implementer, Code Master, Minimal Coder, First Try",
              "REFACTOR phase: Refactor Master, Code Polisher, Type Hint Pro, Documentation Expert, Code Quality Champion",
              "Mastery: TDD Novice, TDD Practitioner, TDD Expert, Perfect Workflow, Speed Runner",
              "Streak: On Fire, Unstoppable, Legend",
              "unlock_achievement() marks achievement as unlocked",
              "get_user_achievements() returns all unlocked achievements",
              "get_total_points() calculates total points",
              "Persists achievements to JSON files"
            ]
          }
        ]
      },
      "badges": {
        "description": "Visual badge system with rarity levels",
        "features": [
          {
            "name": "Badge class",
            "testCases": [
              "Badge has id, achievement_id, name, emoji, rarity, unlock_date",
              "Rarity levels: common, uncommon, rare, epic, legendary",
              "Color property maps rarity to hex color",
              "Serializes to dictionary"
            ]
          },
          {
            "name": "BadgeDisplay service",
            "testCases": [
              "get_rarity_for_points() determines rarity from points",
              "create_badge_from_achievement() creates badge from achievement",
              "get_badge_showcase() organizes badges for dashboard",
              "get_rarity_stats() counts badges by rarity",
              "Badges organized by rarity and category"
            ]
          }
        ]
      },
      "userStats": {
        "description": "User statistics and skill level tracking",
        "features": [
          {
            "name": "UserStats class",
            "testCases": [
              "Tracks total_workflows_completed",
              "Tracks total_time_spent_hours",
              "Tracks current_streak and longest_streak",
              "Tracks total_achievements and total_points",
              "Calculates average_time_per_workflow",
              "Calculates average_hints_per_workflow",
              "Calculates average_attempts_per_step",
              "Tracks per-phase completions (red, green, refactor)",
              "Tracks skill_level per phase (1-5)",
              "Serializes to dictionary"
            ]
          },
          {
            "name": "StatsCalculator service",
            "testCases": [
              "calculate_user_stats() computes comprehensive statistics",
              "calculate_skill_level() determines phase skill (1-5)",
              "get_leaderboard() returns top users",
              "get_user_rank() returns user's rank",
              "get_streak_info() calculates current and longest streaks",
              "Skill level increases with more achievements"
            ]
          }
        ]
      }
    },
    "frontend": {
      "views": {
        "dashboard": {
          "description": "Module selection dashboard",
          "testCases": [
            "Displays all 7 modules",
            "Shows module title and description",
            "Shows progress bar per module",
            "Shows completion count (X/Y workshops)",
            "Shows average score percentage",
            "Shows time estimate",
            "Shows last seen timestamp",
            "Clicking module opens workshop view"
          ]
        },
        "workshop": {
          "description": "Code editor and workshop interface",
          "testCases": [
            "Displays workshop title and prompt",
            "Shows timer countdown",
            "Shows workshop progress (1 of 2)",
            "Shows Previous/Next navigation buttons",
            "Hides Previous on first workshop",
            "Hides Next on last workshop",
            "Shows code editor with monospace font",
            "Tab key inserts 4 spaces",
            "Shows Submit button",
            "Shows Reset button",
            "Shows Back to Dashboard button",
            "Shows hints section",
            "Shows feedback section after submission"
          ]
        }
      },
      "alternativeImplementations": {
        "description": "Multi-approach workshop support",
        "features": [
          {
            "name": "Approach selector",
            "testCases": [
              "Shows dropdown for multi-approach workshops",
              "Hides dropdown for single-approach workshops",
              "Dropdown lists all approach titles",
              "Shows approach description below dropdown",
              "Switching approach loads correct starter code",
              "Switching approach loads correct hints",
              "Switching approach loads saved code if exists",
              "Remembers last selected approach per workshop"
            ]
          },
          {
            "name": "Approach-specific content",
            "testCases": [
              "Each approach has unique starter code",
              "Each approach has unique hints",
              "Each approach has unique test validation",
              "Reset button uses correct starter code for selected approach"
            ]
          }
        ]
      },
      "codeEditor": {
        "description": "Code editing functionality",
        "testCases": [
          "Loads starter code on workshop open",
          "Loads saved code if exists",
          "Tab key inserts 4 spaces (not tab character)",
          "Auto-saves code 1 second after typing stops",
          "Submit button sends code to /api/grade",
          "Reset button restores starter code with confirmation",
          "Code persists when navigating to different workshop",
          "Code persists when navigating to dashboard",
          "Code persists after browser refresh",
          "Code persists per approach for multi-approach workshops"
        ]
      },
      "hints": {
        "description": "Progressive hint reveal system",
        "testCases": [
          "Shows hint count (e.g., '3 hints available')",
          "Initially all hints are hidden",
          "Clicking 'Show Hint' reveals next hint",
          "Revealed hints stay visible",
          "Button text changes to 'Show Next Hint'",
          "Button disabled when all hints revealed",
          "Hints reset when switching approaches",
          "Hints are approach-specific"
        ]
      },
      "timer": {
        "description": "Countdown timer per workshop",
        "testCases": [
          "Starts countdown from timeLimitMinutes",
          "Displays MM:SS format",
          "Updates every second",
          "Shows warning animation when < 1 minute",
          "Stops when workshop completed (score >= 80%)",
          "Continues running if score < 80%",
          "Resets when navigating to different workshop"
        ]
      },
      "feedback": {
        "description": "Grading results display",
        "testCases": [
          "Shows score as 'X / Y points'",
          "Shows percentage",
          "Shows feedback message from test harness",
          "Shows execution time in milliseconds",
          "Shows success indicator (green) for score >= 80%",
          "Shows partial success (yellow) for 50% <= score < 80%",
          "Shows error indicator (red) for score < 50%",
          "Shows error message for syntax errors",
          "Shows error message for runtime errors",
          "Shows stack trace for debugging"
        ]
      },
      "visualizations": {
        "description": "Interactive visualizations for enhanced learning",
        "features": [
          {
            "name": "Visualization manager",
            "testCases": [
              "VisualizationManager orchestrates rendering",
              "Supports multiple renderer types (cli, web, animation, agentic)",
              "Renders all enabled visualizations",
              "Clears previous visualizations before rendering new ones",
              "Handles missing renderer types gracefully"
            ]
          },
          {
            "name": "CLI renderer",
            "testCases": [
              "Renders CLI visualizations in feedback section",
              "Replaces template placeholders with execution results",
              "Displays formatted ASCII art dashboards",
              "Handles missing execution result paths",
              "Styled with monospace font and dark theme"
            ]
          },
          {
            "name": "Web UI renderer",
            "testCases": [
              "WebUIRenderer instantiation and rendering",
              "Split-panel layout creation (horizontal, vertical, tabbed)",
              "Monaco editor initialization with Python syntax highlighting",
              "Results panel content generation with dynamic sections",
              "Config validation for web visualizations",
              "Code display with fallback to pre element",
              "Table, list, and key-value result displays",
              "Responsive layout on desktop and mobile",
              "Resource cleanup on destroy"
            ]
          },
          {
            "name": "Animation renderer",
            "testCases": [
              "AnimationRenderer instantiation and rendering",
              "Data-flow animation visualization",
              "State-machine animation visualization",
              "Tree animation visualization",
              "Animation controls (play, pause, speed, step, reset)",
              "Auto-play functionality",
              "Speed adjustment (0.5x, 1x, 1.5x, 2x)",
              "Step-through debugging support",
              "Progress indicator display",
              "Resource cleanup on destroy"
            ]
          }
        ]
      },
      "progressTracking": {
        "description": "localStorage-based progress persistence",
        "features": [
          {
            "name": "Progress structure",
            "schema": {
              "moduleId": {
                "completed": "number - count of workshops with score >= 80%",
                "scores": "object - workshopId: highestScore",
                "approachScores": "object - workshopId: { approachId: score }",
                "code": "object - workshopId: code OR workshopId: { approachId: code }",
                "approaches": "object - workshopId: lastSelectedApproachId",
                "lastSeenAt": "ISO timestamp"
              }
            },
            "testCases": [
              "Creates module entry on first interaction",
              "Updates scores after each submission",
              "Tracks highest score per workshop",
              "Tracks scores per approach for multi-approach workshops",
              "Workshop score = max(all approach scores)",
              "Increments completed count when score >= 80%",
              "Decrements completed count when score drops < 80%",
              "Saves code per workshop",
              "Saves code per approach for multi-approach workshops",
              "Saves last selected approach per workshop",
              "Updates lastSeenAt timestamp",
              "Persists to localStorage after every change",
              "Loads from localStorage on page load"
            ]
          },
          {
            "name": "Completion logic",
            "testCases": [
              "Workshop complete when ANY approach scores >= 80%",
              "Module complete when ALL workshops have >= 80% score",
              "Progress bar shows completion percentage",
              "Average score calculated from all workshop scores",
              "Completion count shows X/Y format"
            ]
          }
        ]
      },
      "navigation": {
        "description": "Workshop and module navigation",
        "testCases": [
          "Back to Dashboard returns to module list",
          "Previous button goes to previous workshop",
          "Next button goes to next workshop",
          "Navigation preserves code (auto-save)",
          "Navigation preserves progress",
          "Navigation updates lastSeenAt timestamp",
          "Can navigate between modules",
          "Can reopen completed workshops",
          "Reopening workshop loads saved code"
        ]
      }
    },
    "content": {
      "modules": [
        {
          "id": "python_basics",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "basics_01",
              "title": "Even Squares",
              "approachCount": 3,
              "approaches": ["comprehension", "loop", "aop_validation_guard"]
            },
            {
              "id": "basics_02",
              "title": "FizzBuzz",
              "approachCount": 3,
              "approaches": ["if_elif", "string_concat", "aop_logging"]
            }
          ]
        },
        {
          "id": "functions_and_syntax",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "fx_01",
              "title": "Safe Divider",
              "approachCount": 2,
              "approaches": ["traditional", "aop_timing"]
            },
            {
              "id": "fx_02",
              "title": "*args/**kwargs Echo",
              "approachCount": 2,
              "approaches": ["traditional", "aop_type_checking"]
            }
          ]
        },
        {
          "id": "oop_fundamentals",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "oop_01",
              "title": "Vehicle → Truck",
              "approachCount": 2,
              "approaches": ["traditional", "aop_audit"]
            },
            {
              "id": "oop_02",
              "title": "classmethod vs staticmethod",
              "approachCount": 2,
              "approaches": ["traditional", "aop_caching"]
            }
          ]
        },
        {
          "id": "errors_and_debugging",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "err_01",
              "title": "Custom Exception",
              "approachCount": 2,
              "approaches": ["traditional", "aop_retry"]
            },
            {
              "id": "err_02",
              "title": "try/except/else/finally",
              "approachCount": 2,
              "approaches": ["traditional", "aop_error_handling"]
            }
          ]
        },
        {
          "id": "comprehensions_and_generators",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "cg_01",
              "title": "Dict Comp",
              "approachCount": 2,
              "approaches": ["traditional", "aop_validation_decorator"]
            },
            {
              "id": "cg_02",
              "title": "Generator",
              "approachCount": 2,
              "approaches": ["traditional", "aop_generator_logging"]
            }
          ]
        },
        {
          "id": "numpy_intro",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "np_01",
              "title": "Elementwise ops",
              "approachCount": 2,
              "approaches": ["traditional", "aop_shape_validation"]
            },
            {
              "id": "np_02",
              "title": "Dot product",
              "approachCount": 2,
              "approaches": ["traditional", "aop_profiling"]
            }
          ]
        },
        {
          "id": "flask_intro",
          "workshopCount": 2,
          "workshops": [
            {
              "id": "fl_01",
              "title": "Hello Route",
              "approachCount": 2,
              "approaches": ["traditional", "aop_request_logging"]
            },
            {
              "id": "fl_02",
              "title": "Query Handling",
              "approachCount": 2,
              "approaches": ["traditional", "aop_authentication"]
            }
          ]
        }
      ]
    }
  },
  "knownIssues": [
    {
      "issue": "Code persistence not working after navigation",
      "status": "OPEN",
      "description": "After navigating to dashboard and back to workshop, code resets to starter code",
      "reproSteps": [
        "1. Open workshop and write code",
        "2. Navigate to dashboard",
        "3. Navigate back to same workshop",
        "4. Code is reset instead of showing saved code"
      ],
      "expectedBehavior": "Saved code should be restored",
      "actualBehavior": "Starter code is shown",
      "relatedCode": [
        "static/app.js:openWorkshop()",
        "static/app.js:selectApproach()",
        "static/app.js:getSavedCode()",
        "static/app.js:saveCode()"
      ]
    }
  ],
  "testPriorities": {
    "critical": [
      "Code persistence (save and restore)",
      "Progress tracking (scores and completion)",
      "Sandbox security (block dangerous code)",
      "Grading correctness (test execution)",
      "API endpoint functionality"
    ],
    "high": [
      "Alternative implementations (approach switching)",
      "Navigation (between workshops)",
      "localStorage operations",
      "Pattern detection in tests",
      "Error handling"
    ],
    "medium": [
      "Timer functionality",
      "Hint reveal system",
      "UI feedback display",
      "Progress bar calculations"
    ],
    "low": [
      "Keyboard shortcuts",
      "Visual animations",
      "Timestamp formatting"
    ]
  }
}

