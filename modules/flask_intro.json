{
  "id": "flask_intro",
  "title": "Flask Intro",
  "description": "Basic routes, params, and JSON responses.",
  "workshops": [
    {
      "id": "fl_01",
      "title": "Hello Route (string param)",
      "timeLimitMinutes": 8,
      "prompt": "Write a function make_greeting(name) -> 'Hello, {name}'. (We simulate Flask logic here; focus on pure function.)",
      "approaches": [
        {
          "id": "traditional",
          "title": "Traditional Function",
          "description": "Use standard string formatting",
          "starterCode": "def make_greeting(name):\n    # TODO: format string\n    pass\n",
          "hints": [
            "Hint 1: f-strings are concise.",
            "Hint 2: Ensure exact punctuation."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  f=ns.get('make_greeting')\n  if not f: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  if f('Ford')!='Hello, Ford': return {'score':60,'max_score':max_score,'feedback':'String format mismatch'}\n  return {'score':100,'max_score':max_score,'feedback':'Hi!'}\n"
        },
        {
          "id": "aop_request_logging",
          "title": "AOP: Request Logging",
          "description": "Use Aspect-Oriented Programming with a decorator to log all requests (simulating Flask middleware)",
          "starterCode": "from functools import wraps\n\ndef log_request(fn):\n    @wraps(fn)\n    def wrapper(*args, **kwargs):\n        # TODO: print log message with function name and arguments\n        result = fn(*args, **kwargs)\n        # TODO: print log message with result\n        return result\n    return wrapper\n\n@log_request\ndef make_greeting(name):\n    # TODO: return f'Hello, {name}'\n    pass\n",
          "hints": [
            "Hint 1: Before calling fn(), print f'[REQUEST] {fn.__name__} called with args={args}'",
            "Hint 2: After getting result, print f'[REQUEST] Returning: {result}'",
            "Hint 3: In make_greeting, simply return f'Hello, {name}'"
          ],
          "tests": "def grade(ns):\n  max_score=100\n  f=ns.get('make_greeting')\n  if not f: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  # Capture print output\n  import io, sys\n  old_stdout = sys.stdout\n  sys.stdout = buffer = io.StringIO()\n  result = f('Ford')\n  output = buffer.getvalue()\n  sys.stdout = old_stdout\n  # Test basic functionality\n  if result!='Hello, Ford': return {'score':60,'max_score':max_score,'feedback':'String format mismatch'}\n  # Check if logging aspect works\n  if '[REQUEST]' not in output or 'called' not in output:\n    return {'score':80,'max_score':max_score,'feedback':'Request logging should print [REQUEST] messages'}\n  # Check if decorator pattern was used\n  source = ns.get('__source__', '')\n  if '@log_request' not in source or 'wraps' not in source:\n    return {'score':85,'max_score':max_score,'feedback':'Works, but use the @log_request decorator!'}\n  return {'score':100,'max_score':max_score,'feedback':'Perfect! AOP request logging tracks all calls.'}\n"
        }
      ]
    },
    {
      "id": "fl_02",
      "title": "Query Handling (simulate)",
      "timeLimitMinutes": 10,
      "prompt": "Implement echo_query(params: dict) that returns {'ok': True, 'q': params.get('q','')}.",
      "approaches": [
        {
          "id": "traditional",
          "title": "Traditional Function",
          "description": "Use standard dict.get() method",
          "starterCode": "def echo_query(params):\n    # TODO: use dict.get\n    pass\n",
          "hints": [
            "Hint 1: params is a dict; use get('q','').",
            "Hint 2: Return a dict exactly as specified."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  f=ns.get('echo_query')\n  if not f: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  if f({'q':'ping'})!={'ok':True,'q':'ping'}: return {'score':60,'max_score':max_score,'feedback':'Wrong dict result'}\n  if f({})!={'ok':True,'q':''}: return {'score':80,'max_score':max_score,'feedback':'Default missing'}\n  return {'score':100,'max_score':max_score,'feedback':'Clean!'}\n"
        },
        {
          "id": "aop_authentication",
          "title": "AOP: Authentication Guard",
          "description": "Use Aspect-Oriented Programming with a decorator to add authentication checks (simulating Flask auth)",
          "starterCode": "from functools import wraps\n\ndef require_auth(fn):\n    @wraps(fn)\n    def wrapper(params):\n        # TODO: check if 'auth_token' in params\n        # If missing, return {'ok': False, 'error': 'Unauthorized'}\n        # Otherwise, call fn(params)\n        pass\n    return wrapper\n\n@require_auth\ndef echo_query(params):\n    # TODO: return {'ok': True, 'q': params.get('q', '')}\n    pass\n",
          "hints": [
            "Hint 1: In wrapper, check 'if \"auth_token\" not in params: return {\"ok\": False, \"error\": \"Unauthorized\"}'",
            "Hint 2: Otherwise, return fn(params) to call the actual function.",
            "Hint 3: In echo_query, return {'ok': True, 'q': params.get('q', '')}"
          ],
          "tests": "def grade(ns):\n  max_score=100\n  f=ns.get('echo_query')\n  if not f: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  # Test authentication guard\n  result_no_auth = f({'q':'ping'})\n  if result_no_auth.get('ok') != False or 'error' not in result_no_auth:\n    return {'score':70,'max_score':max_score,'feedback':'Should reject requests without auth_token'}\n  # Test with auth token\n  result_with_auth = f({'q':'ping', 'auth_token': 'secret'})\n  if result_with_auth!={'ok':True,'q':'ping'}: return {'score':80,'max_score':max_score,'feedback':'Should work with auth_token'}\n  # Check if decorator pattern was used\n  source = ns.get('__source__', '')\n  if '@require_auth' not in source or 'wraps' not in source:\n    return {'score':85,'max_score':max_score,'feedback':'Works, but use the @require_auth decorator!'}\n  return {'score':100,'max_score':max_score,'feedback':'Excellent! AOP authentication secures endpoints.'}\n"
        }
      ]
    }
  ]
}

