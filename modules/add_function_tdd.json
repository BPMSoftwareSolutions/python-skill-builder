{
  "id": "add_function_tdd",
  "title": "Add Function (TDD)",
  "description": "Learn TDD by implementing an add function that returns the sum of two numbers",
  "difficulty": "beginner",
  "estimated_minutes": 15,
  "phases": {
    "test_suite": {
      "id": "add_function_tests",
      "name": "Add Function Test Suite",
      "description": "Tests for the add function covering basic operations and edge cases",
      "tests": [
        {
          "id": "test_1",
          "name": "test_add_positive_numbers",
          "description": "Add two positive numbers",
          "assertion": "assertEqual(add(2, 3), 5)",
          "assertion_type": "assertEqual",
          "expected": 5,
          "inputs": [2, 3],
          "difficulty": "easy"
        },
        {
          "id": "test_2",
          "name": "test_add_negative_numbers",
          "description": "Add two negative numbers",
          "assertion": "assertEqual(add(-2, -3), -5)",
          "assertion_type": "assertEqual",
          "expected": -5,
          "inputs": [-2, -3],
          "difficulty": "easy"
        },
        {
          "id": "test_3",
          "name": "test_add_mixed_signs",
          "description": "Add numbers with different signs",
          "assertion": "assertEqual(add(5, -3), 2)",
          "assertion_type": "assertEqual",
          "expected": 2,
          "inputs": [5, -3],
          "difficulty": "medium"
        },
        {
          "id": "test_4",
          "name": "test_add_zero",
          "description": "Add with zero",
          "assertion": "assertEqual(add(0, 5), 5)",
          "assertion_type": "assertEqual",
          "expected": 5,
          "inputs": [0, 5],
          "difficulty": "easy"
        },
        {
          "id": "test_5",
          "name": "test_add_floats",
          "description": "Add floating point numbers",
          "assertion": "assertAlmostEqual(add(2.5, 3.7), 6.2)",
          "assertion_type": "assertAlmostEqual",
          "expected": 6.2,
          "inputs": [2.5, 3.7],
          "difficulty": "medium"
        },
        {
          "id": "test_6",
          "name": "test_add_large_numbers",
          "description": "Add large numbers",
          "assertion": "assertEqual(add(999999, 1), 1000000)",
          "assertion_type": "assertEqual",
          "expected": 1000000,
          "inputs": [999999, 1],
          "difficulty": "hard"
        }
      ]
    },
    "mock_data_sets": {
      "valid": {
        "id": "valid",
        "name": "Valid Inputs",
        "description": "Basic positive numbers",
        "difficulty": "easy",
        "data_points": [
          {
            "inputs": [2, 3],
            "expected": 5,
            "description": "Simple addition"
          },
          {
            "inputs": [5, 10],
            "expected": 15,
            "description": "Larger numbers"
          },
          {
            "inputs": [0, 0],
            "expected": 0,
            "description": "Both zeros"
          }
        ]
      },
      "edge": {
        "id": "edge",
        "name": "Edge Cases",
        "description": "Zero, negatives, floats",
        "difficulty": "medium",
        "data_points": [
          {
            "inputs": [0, 5],
            "expected": 5,
            "description": "Zero plus number"
          },
          {
            "inputs": [-2, 3],
            "expected": 1,
            "description": "Negative plus positive"
          },
          {
            "inputs": [2.5, 1.5],
            "expected": 4.0,
            "description": "Floating point numbers"
          }
        ]
      },
      "stress": {
        "id": "stress",
        "name": "Stress Test",
        "description": "Large numbers, performance",
        "difficulty": "hard",
        "data_points": [
          {
            "inputs": [999999, 1],
            "expected": 1000000,
            "description": "Large number addition"
          },
          {
            "inputs": [1000000, 1000000],
            "expected": 2000000,
            "description": "Very large numbers"
          }
        ]
      }
    },
    "guidance": {
      "red": {
        "objective": "Understand the requirements by reading the failing tests",
        "guidance": "Read each test carefully. What do they expect? What inputs do they use? What outputs should the function return?",
        "hints": [
          "Look at the test name to understand what it tests",
          "The assertion shows what the function should return",
          "Try to understand all tests before writing code",
          "Notice the different types of inputs: positive, negative, zero, floats"
        ],
        "learning_objectives": [
          "Understand test-driven development",
          "Learn to read and interpret test cases",
          "Understand assertions and expected values",
          "Recognize edge cases and special scenarios"
        ]
      },
      "green": {
        "objective": "Make all tests pass with the simplest code possible",
        "guidance": "Write the simplest code that makes all tests pass. Don't worry about optimization or edge cases yet.",
        "minimum_requirements": "All RED tests must pass",
        "hints": [
          "Start with the simplest implementation",
          "Don't worry about edge cases yet",
          "Focus on making tests pass",
          "The simplest add function is just: return a + b"
        ],
        "success_criteria": [
          "All tests pass",
          "Function returns correct results for all test cases",
          "Code is simple and straightforward"
        ]
      },
      "refactor": {
        "objective": "Improve code quality while keeping all tests green",
        "guidance": "Keep all tests green while improving your code. Consider readability, performance, and best practices.",
        "guidelines": [
          "Reduce complexity",
          "Improve readability",
          "Remove duplication",
          "Add type hints for clarity",
          "Consider edge cases and error handling"
        ],
        "code_metrics": {
          "target_complexity": 1,
          "target_coverage": 100,
          "target_duplication": 0,
          "target_lines": 5
        },
        "mentor_solution": "def add(a: int | float, b: int | float) -> int | float:\n    \"\"\"Return the sum of two numbers.\"\"\"\n    return a + b",
        "patterns": [
          "Type hints for clarity",
          "Docstrings for documentation",
          "Simple, readable code",
          "No unnecessary complexity"
        ]
      }
    }
  },
  "tdd_workflow": {
    "feature_description": "add(a, b) - Add two numbers and return the sum",
    "step_1_red_write_test": {
      "objective": "Write a test that currently fails",
      "instruction": "Write a test that calls add(2, 3) and asserts the result is 5",
      "requirements": [
        "Function name starts with test_",
        "Calls add(2, 3)",
        "Has an assertion: assert ... == 5",
        "Test must fail (add() doesn't exist yet)"
      ],
      "starter_code": "def test_():\n    pass",
      "example_code": "def test_add_positive_numbers():\n    result = add(2, 3)\n    assert result == 5",
      "hints": [
        "Use assert to check the result",
        "The test should fail because add() isn't implemented",
        "Follow naming convention: test_<function>_<scenario>"
      ],
      "success_criteria": [
        "Test name starts with 'test_'",
        "Test calls add(2, 3)",
        "Test has an assertion",
        "Test fails when executed"
      ],
      "error_messages": {
        "TEST_NAME_INVALID": "Test name must start with 'test_'. Use naming convention: test_<function>_<scenario>",
        "NO_ASSERTIONS": "No assertions found. Use 'assert' to check the result.",
        "TEST_PASSED": "Test passed, but it should fail! The add() function doesn't exist yet."
      }
    },
    "step_2_red_validation": {
      "objective": "Validate your test is correct",
      "instruction": "The system will check that your test is properly formatted and fails as expected",
      "requirements": [
        "Test syntax is valid",
        "Test fails when executed",
        "Test has proper assertions"
      ],
      "starter_code": "",
      "example_code": "",
      "hints": [
        "If your test passes, the add() function must already exist",
        "Make sure you're testing the right thing",
        "Check your assertion is correct"
      ],
      "success_criteria": [
        "Test syntax is valid",
        "Test fails (as expected)"
      ],
      "error_messages": {
        "SYNTAX_ERROR": "Your test has a syntax error. Check your Python code.",
        "TEST_PASSED": "Your test passed, but it should fail! The add() function doesn't exist yet."
      }
    },
    "step_3_green_write_code": {
      "objective": "Write minimal code to pass your test",
      "instruction": "Implement add() to make your test pass",
      "requirements": [
        "Function named add()",
        "Accepts two parameters",
        "Returns sum of parameters",
        "User's test passes"
      ],
      "starter_code": "def add(a, b):\n    pass",
      "example_code": "def add(a, b):\n    return a + b",
      "hints": [
        "Start simple - don't over-engineer",
        "Your test expects add(2, 3) to return 5",
        "Minimum code wins in GREEN phase"
      ],
      "success_criteria": [
        "Function named add()",
        "Accepts two parameters",
        "User's test passes"
      ],
      "error_messages": {
        "FUNCTION_NOT_FOUND": "Function 'add' not defined. Create a function called add(a, b).",
        "TEST_FAILED": "Your test failed. Check the error message and adjust your implementation."
      }
    },
    "step_4_green_validation": {
      "objective": "Validate your code passes the test",
      "instruction": "The system will check that your code passes the test",
      "requirements": [
        "Code syntax is valid",
        "Test passes with your code"
      ],
      "starter_code": "",
      "example_code": "",
      "hints": [
        "If the test fails, check the error message",
        "Make sure your function returns the right value",
        "Check your function signature matches what the test expects"
      ],
      "success_criteria": [
        "Code syntax is valid",
        "Test passes"
      ],
      "error_messages": {
        "SYNTAX_ERROR": "Your code has a syntax error. Check your Python code.",
        "TEST_FAILED": "Your test failed. Check the error message and adjust your implementation."
      }
    },
    "step_5_refactor_improve": {
      "objective": "Improve code quality while keeping test green",
      "instruction": "Refactor add() to be more professional",
      "requirements": [
        "Test still passes",
        "Add type hints",
        "Add docstring",
        "Code complexity unchanged or improved"
      ],
      "example_code": "def add(a: int, b: int) -> int:\n    \"\"\"Add two integers and return the sum.\"\"\"\n    return a + b",
      "hints": [
        "Type hints make code clearer",
        "A docstring explains what the function does",
        "Refactoring improves style, not functionality"
      ],
      "success_criteria": [
        "Test still passes",
        "Added type hints",
        "Added docstring",
        "Code quality improved"
      ],
      "error_messages": {
        "TEST_FAILED": "Test failed after refactoring. Keep the functionality the same!",
        "NO_IMPROVEMENT": "Code not improved. Try adding type hints or a docstring."
      }
    },
    "step_6_refactor_validation": {
      "objective": "Validate your refactored code",
      "instruction": "The system will check that your code is improved and tests still pass",
      "requirements": [
        "Code syntax is valid",
        "Test passes with refactored code",
        "Code quality improved"
      ],
      "starter_code": "",
      "example_code": "",
      "hints": [
        "Type hints and docstrings improve code quality",
        "Make sure the test still passes",
        "Refactoring should not change functionality"
      ],
      "success_criteria": [
        "Code syntax is valid",
        "Test passes",
        "Code quality improved"
      ],
      "error_messages": {
        "SYNTAX_ERROR": "Your refactored code has a syntax error.",
        "TEST_FAILED": "Test failed after refactoring. Keep the functionality the same!"
      }
    }
  },
  "prompt": "Implement an add function that returns the sum of two numbers",
  "starter_code": "def add(a, b):\n    pass\n",
  "hints": [
    "Hint 1: The function should take two parameters",
    "Hint 2: Return the sum of the two parameters",
    "Hint 3: Python's + operator works for numbers"
  ]
}

