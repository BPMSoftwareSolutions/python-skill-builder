{
  "id": "python_basics",
  "title": "Python Basics",
  "description": "Core language skills: functions, loops, and list comprehensions.",
  "workshops": [
    {
      "id": "basics_01",
      "title": "Even Squares",
      "timeLimitMinutes": 7,
      "prompt": "Write a function even_squares(nums) -> list that returns the squares of even numbers from nums, preserving order. Example: [1,2,3,4] -> [4,16]",
      "visualizations": [
        {
          "id": "even_squares_web_dashboard",
          "type": "web",
          "enabled": true,
          "config": {
            "layout": "split-horizontal",
            "panels": [
              {
                "id": "code_panel",
                "type": "code",
                "title": "Your Solution"
              },
              {
                "id": "dashboard_panel",
                "type": "dashboard",
                "title": "Execution Results"
              }
            ]
          }
        },
        {
          "id": "even_squares_data_flow_animation",
          "type": "animation",
          "enabled": true,
          "config": {
            "animationType": "data-flow",
            "duration": 2000,
            "autoPlay": true
          }
        }
      ],
      "approaches": [
        {
          "id": "comprehension",
          "title": "List Comprehension",
          "description": "Use Python's concise list comprehension syntax with filtering",
          "starterCode": "def even_squares(nums):\n    # TODO: use list comprehension with if-clause\n    # Example: [expr for item in list if condition]\n    pass\n",
          "hints": [
            "Hint 1: List comprehensions can include an if-clause for filtering.",
            "Hint 2: Syntax: [n**2 for n in nums if ...]",
            "Hint 3: Even means n % 2 == 0."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'even_squares' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['even_squares']\n  try:\n    result=f([1,2,3,4])\n    if result!=[4,16]: return {'score':60,'max_score':max_score,'feedback':'Expected [4,16] for [1,2,3,4]'}\n    result2=f([1,3,5])\n    if result2!=[]: return {'score':80,'max_score':max_score,'feedback':'No evens should return empty list'}\n    # Check if list comprehension was used\n    source = ns.get('__source__', '')\n    if '[' not in source or 'for' not in source:\n      return {'score':90,'max_score':max_score,'feedback':'Works, but try using list comprehension syntax!'}\n    return {'score':100,'max_score':max_score,'feedback':'Perfect! Clean list comprehension.'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        },
        {
          "id": "loop",
          "title": "For Loop",
          "description": "Use traditional for-loop with append() method",
          "starterCode": "def even_squares(nums):\n    result = []\n    # TODO: loop through nums, check if even, append square\n    return result\n",
          "hints": [
            "Hint 1: Initialize empty list: result = []",
            "Hint 2: Loop with 'for n in nums:' and check 'if n % 2 == 0:'",
            "Hint 3: Use result.append(n ** 2) to add squared value."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'even_squares' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['even_squares']\n  try:\n    result=f([1,2,3,4])\n    if result!=[4,16]: return {'score':60,'max_score':max_score,'feedback':'Expected [4,16] for [1,2,3,4]'}\n    result2=f([1,3,5])\n    if result2!=[]: return {'score':80,'max_score':max_score,'feedback':'No evens should return empty list'}\n    # Check if for-loop was used\n    source = ns.get('__source__', '')\n    if 'for' not in source or 'append' not in source:\n      return {'score':90,'max_score':max_score,'feedback':'Works, but try using a for-loop with append!'}\n    return {'score':100,'max_score':max_score,'feedback':'Perfect! Clear for-loop implementation.'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        },
        {
          "id": "aop_validation_guard",
          "title": "AOP: Validation Decorator",
          "description": "Use Aspect-Oriented Programming with a decorator to separate input validation from business logic",
          "starterCode": "from functools import wraps\n\ndef validate_list(fn):\n    @wraps(fn)\n    def wrapper(nums):\n        # TODO: validate that nums is a list of integers\n        # Raise TypeError if invalid\n        return fn(nums)\n    return wrapper\n\n@validate_list\ndef even_squares(nums):\n    # TODO: return [n**2 for n in nums if n%2==0]\n    pass\n",
          "hints": [
            "Hint 1: In the decorator, check 'if not isinstance(nums, list)' to validate it's a list.",
            "Hint 2: Use 'all(isinstance(x, int) for x in nums)' to check all elements are integers.",
            "Hint 3: The decorator handles validation; the function just needs the list comprehension logic."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'even_squares' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['even_squares']\n  try:\n    # Test basic functionality\n    result=f([1,2,3,4])\n    if result!=[4,16]: return {'score':60,'max_score':max_score,'feedback':'Expected [4,16] for [1,2,3,4]'}\n    result2=f([1,3,5])\n    if result2!=[]: return {'score':70,'max_score':max_score,'feedback':'No evens should return empty list'}\n    # Test validation aspect\n    try:\n      f('bad input')\n      return {'score':80,'max_score':max_score,'feedback':'Validation decorator should raise TypeError for invalid input'}\n    except TypeError:\n      pass  # Expected\n    # Check if decorator pattern was used\n    source = ns.get('__source__', '')\n    if '@' not in source or 'wraps' not in source:\n      return {'score':85,'max_score':max_score,'feedback':'Works, but use the decorator pattern with @wraps!'}\n    return {'score':100,'max_score':max_score,'feedback':'Excellent! AOP validation separates concerns perfectly.'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        }
      ]
    },
    {
      "id": "basics_02",
      "title": "FizzBuzz",
      "timeLimitMinutes": 10,
      "prompt": "Write a function fizzbuzz(n) that returns a list of strings for numbers 1 to n. For multiples of 3, use 'Fizz'. For multiples of 5, use 'Buzz'. For multiples of both, use 'FizzBuzz'. Otherwise, use the number as a string.",
      "visualizations": [
        {
          "id": "fizzbuzz_web_dashboard",
          "type": "web",
          "enabled": true,
          "config": {
            "layout": "split-horizontal",
            "panels": [
              {
                "id": "code_panel",
                "type": "code",
                "title": "Your Solution"
              },
              {
                "id": "dashboard_panel",
                "type": "dashboard",
                "title": "Execution Results"
              }
            ]
          }
        },
        {
          "id": "fizzbuzz_state_machine_animation",
          "type": "animation",
          "enabled": true,
          "config": {
            "animationType": "state-machine",
            "duration": 2500,
            "autoPlay": true
          }
        }
      ],
      "approaches": [
        {
          "id": "if_elif",
          "title": "If-Elif Chain",
          "description": "Use traditional if-elif-else conditional logic",
          "starterCode": "def fizzbuzz(n):\n    result = []\n    for i in range(1, n + 1):\n        # TODO: check divisibility and append appropriate string\n        pass\n    return result\n",
          "hints": [
            "Hint 1: Check divisibility by 15 first (both 3 and 5) to get 'FizzBuzz'.",
            "Hint 2: Use elif for divisibility by 3, then by 5.",
            "Hint 3: Convert numbers to strings with str(i) in the else clause."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'fizzbuzz' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['fizzbuzz']\n  try:\n    result=f(15)\n    expected=['1','2','Fizz','4','Buzz','Fizz','7','8','Fizz','Buzz','11','Fizz','13','14','FizzBuzz']\n    if result!=expected: return {'score':60,'max_score':max_score,'feedback':'Check your FizzBuzz logic'}\n    return {'score':100,'max_score':max_score,'feedback':'Excellent! Classic if-elif approach.'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        },
        {
          "id": "string_concat",
          "title": "String Concatenation",
          "description": "Build the string by concatenating 'Fizz' and 'Buzz' conditionally",
          "starterCode": "def fizzbuzz(n):\n    result = []\n    for i in range(1, n + 1):\n        s = ''\n        # TODO: build string by checking divisibility\n        # If s is empty, use str(i)\n        pass\n    return result\n",
          "hints": [
            "Hint 1: Start with empty string s = ''",
            "Hint 2: If divisible by 3, add 'Fizz' to s. If divisible by 5, add 'Buzz' to s.",
            "Hint 3: If s is still empty, set s = str(i). Then append s to result."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'fizzbuzz' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['fizzbuzz']\n  try:\n    result=f(15)\n    expected=['1','2','Fizz','4','Buzz','Fizz','7','8','Fizz','Buzz','11','Fizz','13','14','FizzBuzz']\n    if result!=expected: return {'score':60,'max_score':max_score,'feedback':'Check your FizzBuzz logic'}\n    # Check for string concatenation pattern\n    source = ns.get('__source__', '')\n    if '+=' in source or '+' in source:\n      return {'score':100,'max_score':max_score,'feedback':'Perfect! Elegant string concatenation approach.'}\n    return {'score':90,'max_score':max_score,'feedback':'Works, but try the string concatenation pattern!'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        },
        {
          "id": "aop_logging",
          "title": "AOP: Logging Decorator",
          "description": "Use Aspect-Oriented Programming with a decorator to add observability without modifying core logic",
          "starterCode": "from functools import wraps\n\ndef log_execution(fn):\n    @wraps(fn)\n    def wrapper(*args, **kwargs):\n        # TODO: print log message before calling function\n        result = fn(*args, **kwargs)\n        # TODO: print log message after function returns\n        return result\n    return wrapper\n\n@log_execution\ndef fizzbuzz(n):\n    result = []\n    for i in range(1, n + 1):\n        # TODO: implement FizzBuzz logic (if-elif or string concat)\n        pass\n    return result\n",
          "hints": [
            "Hint 1: Before calling fn(), print a message like f'[LOG] Calling {fn.__name__} with n={args[0]}'",
            "Hint 2: After getting result, print f'[LOG] Returned {len(result)} items'",
            "Hint 3: The FizzBuzz logic is the same - check divisibility by 15, 3, 5, or use string concatenation."
          ],
          "tests": "def grade(ns):\n  max_score=100\n  if 'fizzbuzz' not in ns: return {'score':0,'max_score':max_score,'feedback':'Function missing'}\n  f=ns['fizzbuzz']\n  try:\n    # Capture print output\n    import io, sys\n    old_stdout = sys.stdout\n    sys.stdout = buffer = io.StringIO()\n    result=f(15)\n    output = buffer.getvalue()\n    sys.stdout = old_stdout\n    # Test basic functionality\n    expected=['1','2','Fizz','4','Buzz','Fizz','7','8','Fizz','Buzz','11','Fizz','13','14','FizzBuzz']\n    if result!=expected: return {'score':60,'max_score':max_score,'feedback':'Check your FizzBuzz logic'}\n    # Check if logging aspect works\n    if '[LOG]' not in output or 'Calling' not in output:\n      return {'score':80,'max_score':max_score,'feedback':'Logging decorator should print [LOG] messages'}\n    # Check if decorator pattern was used\n    source = ns.get('__source__', '')\n    if '@' not in source or 'wraps' not in source:\n      return {'score':85,'max_score':max_score,'feedback':'Works, but use the decorator pattern with @wraps!'}\n    return {'score':100,'max_score':max_score,'feedback':'Perfect! AOP logging adds observability cleanly.'}\n  except Exception as e:\n    return {'score':0,'max_score':max_score,'feedback':str(e)}\n"
        }
      ]
    }
  ]
}

